;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/28/2020
;Author  : zahra
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#define F_CPU 8000000UL  //CPU Frequency 8MHz
;#define RS 0             //RS=0
;#define EN 1             //EN=1
;
;int ov_counter;
;int i = 0;
;unsigned int start_edge, end_edge;
;unsigned int clocks,period_out;
;char frequency[10];
;
;void lcd_comm(char);
;void lcd_data(char);
;void lcd_init(void);
;void lcd_clear(void);
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void){   // Timer1 overflow ISR
; 0000 002B interrupt [9] void timer1_ovf_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C 
; 0000 002D      ++ov_counter;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002E }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;interrupt [TIM1_CAPT] void timer1_capt_isr(void){  //Timer1 input capture ISR
; 0000 0030 interrupt [6] void timer1_capt_isr(void){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0031 
; 0000 0032       //combine two 8bit capture register into the 16 bit count
; 0000 0033       end_edge = 256 * ICR1H + ICR1L + ov_counter * 65536;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0034       clocks =(unsigned long)end_edge + ((unsigned long)ov_counter *65536) - (unsigned long)start_edge;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0035 
; 0000 0036       period_out = (clocks/750) ;  //output ms
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0037 
; 0000 0038       ov_counter = 0;   //clear overflow
;PCODE: $0000002A VOL: 0
; 0000 0039       start_edge = end_edge;   //save end time to use as start edge
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A 
; 0000 003B       sprintf(frequency,"%d Hz", period_out);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003C       lcd_init();    //initialize LCD
;PCODE: $00000039 VOL: 0
; 0000 003D 
; 0000 003E      //adding data
; 0000 003F       for(i=0 ; i<6 ; i++){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0040 
; 0000 0041            lcd_data(frequency[i]);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0042 
; 0000 0043       }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0044 
; 0000 0045 }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void main(void)
; 0000 0048 {
;PCODE: $00000050 VOL: 0
; 0000 0049 
; 0000 004A TCCR1A = 0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004B TCCR1B = 0xC2; //enable input capture mode / prescaler 8
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004C 
; 0000 004D TIMSK = 0x24;  //unmask timer1 overflow and capture interrupts
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004E 
; 0000 004F #asm("sei")    // Enable global interrupts
;PCODE: $00000057 VOL: 0
	sei
;PCODE: $00000058 VOL: 0
; 0000 0050 
; 0000 0051 while (1)
;PCODE: $00000059 VOL: 0
; 0000 0052       {
; 0000 0053        ;   //do nothing
; 0000 0054 
; 0000 0055       }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0056 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;void lcd_comm(char x){
; 0000 0058 void lcd_comm(char x){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0059 
; 0000 005A     PORTB = x;
;PCODE: $00000061 VOL: 0
;	x -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005B     PORTA &= ~(1<<RS);  //RS=0 command reg.
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005C     PORTA |= 1<<EN;     //Enable Pulse
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005D     delay_ms(30);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005E     PORTA &= ~(1<<EN);  //Disable Pulse
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005F 
; 0000 0060 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;void lcd_data(char x){
; 0000 0062 void lcd_data(char x){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0063 
; 0000 0064     PORTB = x;
;PCODE: $00000072 VOL: 0
;	x -> Y+0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0065     PORTA |= 1<<RS;    //RS=1 Data reg.
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0066     PORTA |= 1<<EN;    //Enable Pulse
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0067     delay_ms(30);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0068     PORTA &= ~(1<<EN); //Disable Pulse
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0069 
; 0000 006A }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;void lcd_clear()
; 0000 006D {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 006E 	lcd_comm(0x01);		/* clear display */
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006F 	lcd_comm(0x80);		/* cursor at home position */
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0070 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;void lcd_init(void){
; 0000 0072 void lcd_init(void){
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0073 
; 0000 0074     DDRA = 0x03;      //PORTA initialization
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0075     DDRB = 0xFF;      //PORTB initialization
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0076 
; 0000 0077     lcd_comm(0x38);   //initialization of 16X2 LCD in 8bit mode
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0078     lcd_comm(0x06);   //auto Increment cursor
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0079     lcd_comm(0x0D);   //Display ON Cursor ON
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 007A     lcd_comm(0x01);   //clear display
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 007B     lcd_comm(0x80);   //cursor at home position
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 007C 
; 0000 007D }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
